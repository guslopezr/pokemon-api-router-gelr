"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FloatingSet = void 0;
var Floating_1 = require("./Floating");
var FloatingSet = /** @class */ (function () {
    /** @internal */
    function FloatingSet(model) {
        this._floatingWindows = [];
    }
    Object.defineProperty(FloatingSet.prototype, "floatingWindows", {
        get: function () {
            return this._floatingWindows;
        },
        enumerable: false,
        configurable: true
    });
    FloatingSet.prototype.delete = function (node) {
        var index = this._floatingWindows.findIndex(function (w) { return w.tab === node; });
        if (index !== -1) {
            this._floatingWindows.splice(index, 1);
        }
    };
    FloatingSet.prototype.find = function (node) {
        return this._floatingWindows.find(function (w) { return w.tab === node; });
    };
    FloatingSet.prototype.add = function (r, parentId, tabIndex, node) {
        this._floatingWindows.push(new Floating_1.Floating(r, parentId, tabIndex, node));
    };
    /** @internal */
    FloatingSet.prototype._forEachNode = function (fn) {
        this._floatingWindows.forEach(function (window) {
            fn(window.tab, 0);
        });
    };
    /** @internal */
    FloatingSet.prototype._toJson = function () {
        // update window location/size
        this._floatingWindows.forEach(function (floatingWindow) {
            var window = floatingWindow.tab.getWindow();
            if (window) {
                floatingWindow.rect.y = window.screenTop;
                floatingWindow.rect.x = window.screenLeft;
                floatingWindow.rect.width = window.innerWidth;
                floatingWindow.rect.height = window.innerHeight;
            }
        });
        return this._floatingWindows.map(function (window) { return window.toJson(); });
    };
    /** @internal */
    FloatingSet._fromJson = function (json, model) {
        var floatingSet = new FloatingSet(model);
        json.forEach(function (json) { return floatingSet._floatingWindows.push(Floating_1.Floating._fromJson(json, model)); });
        return floatingSet;
    };
    return FloatingSet;
}());
exports.FloatingSet = FloatingSet;
//# sourceMappingURL=FloatingSet.js.map