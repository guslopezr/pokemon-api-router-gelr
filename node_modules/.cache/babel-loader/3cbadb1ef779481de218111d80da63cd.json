{"ast":null,"code":"import _classCallCheck from \"/Users/gustavolopez/Documents/Personal GLR/Curso Desafio Latam/MOD REACT 7 ROUTER 2/poke-api router gelr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gustavolopez/Documents/Personal GLR/Curso Desafio Latam/MOD REACT 7 ROUTER 2/poke-api router gelr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Action } from \"./Action\";\n/**\n * The Action creator class for FlexLayout model actions\n */\n\nexport var Actions = /*#__PURE__*/function () {\n  function Actions() {\n    _classCallCheck(this, Actions);\n  }\n\n  _createClass(Actions, null, [{\n    key: \"addNode\",\n\n    /**\n     * Adds a tab node to the given tabset node\n     * @param json the json for the new tab node e.g {type:\"tab\", component:\"table\"}\n     * @param toNodeId the new tab node will be added to the tabset with this node id\n     * @param location the location where the new tab will be added, one of the DockLocation enum values.\n     * @param index for docking to the center this value is the index of the tab, use -1 to add to the end.\n     * @param select (optional) whether to select the new tab, overriding autoSelectTab\n     * @returns {Action} the action\n     */\n    value: function addNode(json, toNodeId, location, index, select) {\n      return new Action(Actions.ADD_NODE, {\n        json: json,\n        toNode: toNodeId,\n        location: location.getName(),\n        index: index,\n        select: select\n      });\n    }\n    /**\n     * Moves a node (tab or tabset) from one location to another\n     * @param fromNodeId the id of the node to move\n     * @param toNodeId the id of the node to receive the moved node\n     * @param location the location where the moved node will be added, one of the DockLocation enum values.\n     * @param index for docking to the center this value is the index of the tab, use -1 to add to the end.\n     * @param select (optional) whether to select the moved tab(s) in new tabset, overriding autoSelectTab\n     * @returns {Action} the action\n     */\n\n  }, {\n    key: \"moveNode\",\n    value: function moveNode(fromNodeId, toNodeId, location, index, select) {\n      return new Action(Actions.MOVE_NODE, {\n        fromNode: fromNodeId,\n        toNode: toNodeId,\n        location: location.getName(),\n        index: index,\n        select: select\n      });\n    }\n    /**\n     * Deletes a tab node from the layout\n     * @param tabsetNodeId the id of the tab node to delete\n     * @returns {Action} the action\n     */\n\n  }, {\n    key: \"deleteTab\",\n    value: function deleteTab(tabNodeId) {\n      return new Action(Actions.DELETE_TAB, {\n        node: tabNodeId\n      });\n    }\n    /**\n     * Deletes a tabset node and all it's child tab nodes from the layout\n     * @param tabsetNodeId the id of the tabset node to delete\n     * @returns {Action} the action\n     */\n\n  }, {\n    key: \"deleteTabset\",\n    value: function deleteTabset(tabsetNodeId) {\n      return new Action(Actions.DELETE_TABSET, {\n        node: tabsetNodeId\n      });\n    }\n    /**\n     * Change the given nodes tab text\n     * @param tabNodeId the id of the node to rename\n     * @param text the test of the tab\n     * @returns {Action} the action\n     */\n\n  }, {\n    key: \"renameTab\",\n    value: function renameTab(tabNodeId, text) {\n      return new Action(Actions.RENAME_TAB, {\n        node: tabNodeId,\n        text: text\n      });\n    }\n    /**\n     * Selects the given tab in its parent tabset\n     * @param tabNodeId the id of the node to set selected\n     * @returns {Action} the action\n     */\n\n  }, {\n    key: \"selectTab\",\n    value: function selectTab(tabNodeId) {\n      return new Action(Actions.SELECT_TAB, {\n        tabNode: tabNodeId\n      });\n    }\n    /**\n     * Set the given tabset node as the active tabset\n     * @param tabsetNodeId the id of the tabset node to set as active\n     * @returns {Action} the action\n     */\n\n  }, {\n    key: \"setActiveTabset\",\n    value: function setActiveTabset(tabsetNodeId) {\n      return new Action(Actions.SET_ACTIVE_TABSET, {\n        tabsetNode: tabsetNodeId\n      });\n    }\n    /**\n     * Adjust the splitter between two tabsets\n     * @example\n     *  Actions.adjustSplit({node1: \"1\", weight1:30, pixelWidth1:300, node2: \"2\", weight2:70, pixelWidth2:700});\n     *\n     * @param splitSpec an object the defines the new split between two tabsets, see example below.\n     * @returns {Action} the action\n     */\n\n  }, {\n    key: \"adjustSplit\",\n    value: function adjustSplit(splitSpec) {\n      var node1 = splitSpec.node1Id;\n      var node2 = splitSpec.node2Id;\n      return new Action(Actions.ADJUST_SPLIT, {\n        node1: node1,\n        weight1: splitSpec.weight1,\n        pixelWidth1: splitSpec.pixelWidth1,\n        node2: node2,\n        weight2: splitSpec.weight2,\n        pixelWidth2: splitSpec.pixelWidth2\n      });\n    }\n  }, {\n    key: \"adjustBorderSplit\",\n    value: function adjustBorderSplit(nodeId, pos) {\n      return new Action(Actions.ADJUST_BORDER_SPLIT, {\n        node: nodeId,\n        pos: pos\n      });\n    }\n    /**\n     * Maximizes the given tabset\n     * @param tabsetNodeId the id of the tabset to maximize\n     * @returns {Action} the action\n     */\n\n  }, {\n    key: \"maximizeToggle\",\n    value: function maximizeToggle(tabsetNodeId) {\n      return new Action(Actions.MAXIMIZE_TOGGLE, {\n        node: tabsetNodeId\n      });\n    }\n    /**\n     * Updates the global model jsone attributes\n     * @param attributes the json for the model attributes to update (merge into the existing attributes)\n     * @returns {Action} the action\n     */\n\n  }, {\n    key: \"updateModelAttributes\",\n    value: function updateModelAttributes(attributes) {\n      return new Action(Actions.UPDATE_MODEL_ATTRIBUTES, {\n        json: attributes\n      });\n    }\n    /**\n     * Updates the given nodes json attributes\n     * @param nodeId the id of the node to update\n     * @param attributes the json attributes to update (merge with the existing attributes)\n     * @returns {Action} the action\n     */\n\n  }, {\n    key: \"updateNodeAttributes\",\n    value: function updateNodeAttributes(nodeId, attributes) {\n      return new Action(Actions.UPDATE_NODE_ATTRIBUTES, {\n        node: nodeId,\n        json: attributes\n      });\n    }\n  }, {\n    key: \"floatTab\",\n    value: function floatTab(nodeId) {\n      return new Action(Actions.FLOAT_TAB, {\n        node: nodeId\n      });\n    }\n  }, {\n    key: \"unFloatTab\",\n    value: function unFloatTab(nodeId) {\n      return new Action(Actions.UNFLOAT_TAB, {\n        node: nodeId\n      });\n    }\n  }]);\n\n  return Actions;\n}();\nActions.ADD_NODE = \"FlexLayout_AddNode\";\nActions.MOVE_NODE = \"FlexLayout_MoveNode\";\nActions.DELETE_TAB = \"FlexLayout_DeleteTab\";\nActions.DELETE_TABSET = \"FlexLayout_DeleteTabset\";\nActions.RENAME_TAB = \"FlexLayout_RenameTab\";\nActions.SELECT_TAB = \"FlexLayout_SelectTab\";\nActions.SET_ACTIVE_TABSET = \"FlexLayout_SetActiveTabset\";\nActions.ADJUST_SPLIT = \"FlexLayout_AdjustSplit\";\nActions.ADJUST_BORDER_SPLIT = \"FlexLayout_AdjustBorderSplit\";\nActions.MAXIMIZE_TOGGLE = \"FlexLayout_MaximizeToggle\";\nActions.UPDATE_MODEL_ATTRIBUTES = \"FlexLayout_UpdateModelAttributes\";\nActions.UPDATE_NODE_ATTRIBUTES = \"FlexLayout_UpdateNodeAttributes\";\nActions.FLOAT_TAB = \"FlexLayout_FloatTab\";\nActions.UNFLOAT_TAB = \"FlexLayout_UnFloatTab\";","map":null,"metadata":{},"sourceType":"module"}