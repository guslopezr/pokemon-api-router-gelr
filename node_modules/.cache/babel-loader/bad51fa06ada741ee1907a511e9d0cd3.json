{"ast":null,"code":"import _classCallCheck from \"/Users/gustavolopez/Documents/Personal GLR/Curso Desafio Latam/MOD REACT 7 ROUTER 2/poke-api router gelr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gustavolopez/Documents/Personal GLR/Curso Desafio Latam/MOD REACT 7 ROUTER 2/poke-api router gelr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Attribute } from \"./Attribute\";\n/** @internal */\n\nexport var AttributeDefinitions = /*#__PURE__*/function () {\n  function AttributeDefinitions() {\n    _classCallCheck(this, AttributeDefinitions);\n\n    this.attributes = [];\n    this.nameToAttribute = {};\n  }\n\n  _createClass(AttributeDefinitions, [{\n    key: \"addWithAll\",\n    value: function addWithAll(name, modelName, defaultValue, alwaysWriteJson) {\n      var attr = new Attribute(name, modelName, defaultValue, alwaysWriteJson);\n      this.attributes.push(attr);\n      this.nameToAttribute[name] = attr;\n      return attr;\n    }\n  }, {\n    key: \"addInherited\",\n    value: function addInherited(name, modelName) {\n      return this.addWithAll(name, modelName, undefined, false);\n    }\n  }, {\n    key: \"add\",\n    value: function add(name, defaultValue, alwaysWriteJson) {\n      return this.addWithAll(name, undefined, defaultValue, alwaysWriteJson);\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this.attributes;\n    }\n  }, {\n    key: \"getModelName\",\n    value: function getModelName(name) {\n      var conversion = this.nameToAttribute[name];\n\n      if (conversion !== undefined) {\n        return conversion.modelName;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"toJson\",\n    value: function toJson(jsonObj, obj) {\n      var _iterator = _createForOfIteratorHelper(this.attributes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var attr = _step.value;\n          var fromValue = obj[attr.name];\n\n          if (attr.alwaysWriteJson || fromValue !== attr.defaultValue) {\n            jsonObj[attr.name] = fromValue;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"fromJson\",\n    value: function fromJson(jsonObj, obj) {\n      var _iterator2 = _createForOfIteratorHelper(this.attributes),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var attr = _step2.value;\n          var fromValue = jsonObj[attr.name];\n\n          if (fromValue === undefined) {\n            obj[attr.name] = attr.defaultValue;\n          } else {\n            obj[attr.name] = fromValue;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(jsonObj, obj) {\n      var _iterator3 = _createForOfIteratorHelper(this.attributes),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var attr = _step3.value;\n\n          if (jsonObj.hasOwnProperty(attr.name)) {\n            var fromValue = jsonObj[attr.name];\n\n            if (fromValue === undefined) {\n              delete obj[attr.name];\n            } else {\n              obj[attr.name] = fromValue;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"setDefaults\",\n    value: function setDefaults(obj) {\n      var _iterator4 = _createForOfIteratorHelper(this.attributes),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var attr = _step4.value;\n          obj[attr.name] = attr.defaultValue;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"toTypescriptInterface\",\n    value: function toTypescriptInterface(name, parentAttributes) {\n      var lines = [];\n      var sorted = this.attributes.sort(function (a, b) {\n        return a.name.localeCompare(b.name);\n      }); // const sorted = this.attributes;\n\n      lines.push(\"export interface I\" + name + \"Attributes {\");\n\n      for (var i = 0; i < sorted.length; i++) {\n        var c = sorted[i];\n        var type = c.type;\n        var defaultValue = undefined;\n        var attr = c;\n        var inherited = undefined;\n\n        if (attr.defaultValue !== undefined) {\n          defaultValue = attr.defaultValue;\n        } else if (attr.modelName !== undefined && parentAttributes !== undefined && parentAttributes.nameToAttribute[attr.modelName] !== undefined) {\n          inherited = attr.modelName;\n          attr = parentAttributes.nameToAttribute[attr.modelName];\n          defaultValue = attr.defaultValue;\n          type = attr.type;\n        }\n\n        var defValue = JSON.stringify(defaultValue);\n        var required = attr.required || attr.fixed ? \"\" : \"?\";\n\n        if (c.fixed) {\n          lines.push(\"\\t\" + c.name + \": \" + defValue + \";\");\n        } else {\n          var comment = (defaultValue !== undefined ? \"default: \" + defValue : \"\") + (inherited !== undefined ? \" - inherited from global \" + inherited : \"\");\n          lines.push(\"\\t\" + c.name + required + \": \" + type + \";\" + (comment.length > 0 ? \" // \" + comment : \"\"));\n        }\n      }\n\n      lines.push(\"}\");\n      return lines.join(\"\\n\");\n    }\n  }]);\n\n  return AttributeDefinitions;\n}();","map":null,"metadata":{},"sourceType":"module"}