{"ast":null,"code":"import _toConsumableArray from \"/Users/gustavolopez/Documents/Personal GLR/Curso Desafio Latam/MOD REACT 7 ROUTER 2/poke-api router gelr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from \"react\";\nimport { I18nLabel } from \"../I18nLabel\";\nimport { Actions } from \"../model/Actions\";\nimport { showPopup } from \"../PopupMenu\";\nimport { TabButton } from \"./TabButton\";\nimport { useTabOverflow } from \"./TabOverflowHook\";\nimport { Orientation } from \"../Orientation\";\nimport { CLASSES } from \"../Types\";\nimport { hideElement, isAuxMouseEvent } from \"./Utils\";\n/** @internal */\n\nexport var TabSet = function TabSet(props) {\n  var node = props.node,\n      layout = props.layout,\n      iconFactory = props.iconFactory,\n      titleFactory = props.titleFactory,\n      icons = props.icons,\n      path = props.path;\n  var toolbarRef = React.useRef(null);\n  var overflowbuttonRef = React.useRef(null);\n  var tabbarInnerRef = React.useRef(null);\n  var stickyButtonsRef = React.useRef(null);\n\n  var _useTabOverflow = useTabOverflow(node, Orientation.HORZ, toolbarRef, stickyButtonsRef),\n      selfRef = _useTabOverflow.selfRef,\n      position = _useTabOverflow.position,\n      userControlledLeft = _useTabOverflow.userControlledLeft,\n      hiddenTabs = _useTabOverflow.hiddenTabs,\n      onMouseWheel = _useTabOverflow.onMouseWheel,\n      tabsTruncated = _useTabOverflow.tabsTruncated;\n\n  var onOverflowClick = function onOverflowClick(event) {\n    var callback = layout.getShowOverflowMenu();\n\n    if (callback !== undefined) {\n      callback(node, event, hiddenTabs, onOverflowItemSelect);\n    } else {\n      var element = overflowbuttonRef.current;\n      showPopup(element, hiddenTabs, onOverflowItemSelect, layout, iconFactory, titleFactory);\n    }\n\n    event.stopPropagation();\n  };\n\n  var onOverflowItemSelect = function onOverflowItemSelect(item) {\n    layout.doAction(Actions.selectTab(item.node.getId()));\n    userControlledLeft.current = false;\n  };\n\n  var onMouseDown = function onMouseDown(event) {\n    if (!isAuxMouseEvent(event)) {\n      var name = node.getName();\n\n      if (name === undefined) {\n        name = \"\";\n      } else {\n        name = \": \" + name;\n      }\n\n      layout.doAction(Actions.setActiveTabset(node.getId()));\n\n      if (!layout.getEditingTab()) {\n        var message = layout.i18nName(I18nLabel.Move_Tabset, name);\n\n        if (node.getModel().getMaximizedTabset() !== undefined) {\n          layout.dragStart(event, message, node, false, function (event2) {\n            return undefined;\n          }, onDoubleClick);\n        } else {\n          layout.dragStart(event, message, node, node.isEnableDrag(), function (event2) {\n            return undefined;\n          }, onDoubleClick);\n        }\n      }\n    }\n  };\n\n  var onAuxMouseClick = function onAuxMouseClick(event) {\n    if (isAuxMouseEvent(event)) {\n      layout.auxMouseClick(node, event);\n    }\n  };\n\n  var onContextMenu = function onContextMenu(event) {\n    layout.showContextMenu(node, event);\n  };\n\n  var onInterceptMouseDown = function onInterceptMouseDown(event) {\n    event.stopPropagation();\n  };\n\n  var onMaximizeToggle = function onMaximizeToggle(event) {\n    if (node.canMaximize()) {\n      layout.maximize(node);\n    }\n\n    event.stopPropagation();\n  };\n\n  var onClose = function onClose(event) {\n    layout.doAction(Actions.deleteTabset(node.getId()));\n    event.stopPropagation();\n  };\n\n  var onFloatTab = function onFloatTab(event) {\n    if (selectedTabNode !== undefined) {\n      layout.doAction(Actions.floatTab(selectedTabNode.getId()));\n    }\n\n    event.stopPropagation();\n  };\n\n  var onDoubleClick = function onDoubleClick(event) {\n    if (node.canMaximize()) {\n      layout.maximize(node);\n    }\n  }; // Start Render\n\n\n  var cm = layout.getClassName; // tabbar inner can get shifted left via tab rename, this resets scrollleft to 0\n\n  if (tabbarInnerRef.current !== null && tabbarInnerRef.current.scrollLeft !== 0) {\n    tabbarInnerRef.current.scrollLeft = 0;\n  }\n\n  var selectedTabNode = node.getSelectedNode();\n\n  var style = node._styleWithPosition();\n\n  if (node.getModel().getMaximizedTabset() !== undefined && !node.isMaximized()) {\n    hideElement(style, node.getModel().isUseVisibility());\n  }\n\n  var tabs = [];\n\n  if (node.isEnableTabStrip()) {\n    for (var i = 0; i < node.getChildren().length; i++) {\n      var child = node.getChildren()[i];\n      var isSelected = node.getSelected() === i;\n      tabs.push(React.createElement(TabButton, {\n        layout: layout,\n        node: child,\n        path: path + \"/tb\" + i,\n        key: child.getId(),\n        selected: isSelected,\n        iconFactory: iconFactory,\n        titleFactory: titleFactory,\n        icons: icons\n      }));\n\n      if (i < node.getChildren().length - 1) {\n        tabs.push(React.createElement(\"div\", {\n          key: \"divider\" + i,\n          className: cm(CLASSES.FLEXLAYOUT__TABSET_TAB_DIVIDER)\n        }));\n      }\n    }\n  }\n\n  var showHeader = node.getName() !== undefined;\n  var stickyButtons = [];\n  var buttons = [];\n  var headerButtons = []; // allow customization of header contents and buttons\n\n  var renderState = {\n    headerContent: node.getName(),\n    stickyButtons: stickyButtons,\n    buttons: buttons,\n    headerButtons: headerButtons\n  };\n  layout.customizeTabSet(node, renderState);\n  var headerContent = renderState.headerContent;\n  stickyButtons = renderState.stickyButtons;\n  buttons = renderState.buttons;\n  headerButtons = renderState.headerButtons;\n\n  if (stickyButtons.length > 0) {\n    if (tabsTruncated) {\n      buttons = [].concat(_toConsumableArray(stickyButtons), _toConsumableArray(buttons));\n    } else {\n      tabs.push(React.createElement(\"div\", {\n        ref: stickyButtonsRef,\n        key: \"sticky_buttons_container\",\n        onMouseDown: onInterceptMouseDown,\n        onTouchStart: onInterceptMouseDown,\n        onDragStart: function onDragStart(e) {\n          e.preventDefault();\n        },\n        className: cm(CLASSES.FLEXLAYOUT__TAB_TOOLBAR_STICKY_BUTTONS_CONTAINER)\n      }, stickyButtons));\n    }\n  }\n\n  var toolbar;\n\n  if (hiddenTabs.length > 0) {\n    var overflowTitle = layout.i18nName(I18nLabel.Overflow_Menu_Tooltip);\n    var overflowContent;\n\n    if (typeof icons.more === \"function\") {\n      overflowContent = icons.more(node, hiddenTabs);\n    } else {\n      overflowContent = React.createElement(React.Fragment, null, icons.more, React.createElement(\"div\", {\n        className: cm(CLASSES.FLEXLAYOUT__TAB_BUTTON_OVERFLOW_COUNT)\n      }, hiddenTabs.length));\n    }\n\n    buttons.push(React.createElement(\"button\", {\n      key: \"overflowbutton\",\n      \"data-layout-path\": path + \"/button/overflow\",\n      ref: overflowbuttonRef,\n      className: cm(CLASSES.FLEXLAYOUT__TAB_TOOLBAR_BUTTON) + \" \" + cm(CLASSES.FLEXLAYOUT__TAB_BUTTON_OVERFLOW),\n      title: overflowTitle,\n      onClick: onOverflowClick,\n      onMouseDown: onInterceptMouseDown,\n      onTouchStart: onInterceptMouseDown\n    }, overflowContent));\n  }\n\n  if (selectedTabNode !== undefined && layout.isSupportsPopout() && selectedTabNode.isEnableFloat() && !selectedTabNode.isFloating()) {\n    var floatTitle = layout.i18nName(I18nLabel.Float_Tab);\n    buttons.push(React.createElement(\"button\", {\n      key: \"float\",\n      \"data-layout-path\": path + \"/button/float\",\n      title: floatTitle,\n      className: cm(CLASSES.FLEXLAYOUT__TAB_TOOLBAR_BUTTON) + \" \" + cm(CLASSES.FLEXLAYOUT__TAB_TOOLBAR_BUTTON_FLOAT),\n      onClick: onFloatTab,\n      onMouseDown: onInterceptMouseDown,\n      onTouchStart: onInterceptMouseDown\n    }, typeof icons.popout === \"function\" ? icons.popout(selectedTabNode) : icons.popout));\n  }\n\n  if (node.canMaximize()) {\n    var minTitle = layout.i18nName(I18nLabel.Restore);\n    var maxTitle = layout.i18nName(I18nLabel.Maximize);\n    var btns = showHeader ? headerButtons : buttons;\n    btns.push(React.createElement(\"button\", {\n      key: \"max\",\n      \"data-layout-path\": path + \"/button/max\",\n      title: node.isMaximized() ? minTitle : maxTitle,\n      className: cm(CLASSES.FLEXLAYOUT__TAB_TOOLBAR_BUTTON) + \" \" + cm(CLASSES.FLEXLAYOUT__TAB_TOOLBAR_BUTTON_ + (node.isMaximized() ? \"max\" : \"min\")),\n      onClick: onMaximizeToggle,\n      onMouseDown: onInterceptMouseDown,\n      onTouchStart: onInterceptMouseDown\n    }, node.isMaximized() ? typeof icons.restore === \"function\" ? icons.restore(node) : icons.restore : typeof icons.maximize === \"function\" ? icons.maximize(node) : icons.maximize));\n  }\n\n  if (!node.isMaximized() && node.isEnableClose()) {\n    var title = layout.i18nName(I18nLabel.Close_Tabset);\n\n    var _btns = showHeader ? headerButtons : buttons;\n\n    _btns.push(React.createElement(\"button\", {\n      key: \"close\",\n      \"data-layout-path\": path + \"/button/close\",\n      title: title,\n      className: cm(CLASSES.FLEXLAYOUT__TAB_TOOLBAR_BUTTON) + \" \" + cm(CLASSES.FLEXLAYOUT__TAB_TOOLBAR_BUTTON_CLOSE),\n      onClick: onClose,\n      onMouseDown: onInterceptMouseDown,\n      onTouchStart: onInterceptMouseDown\n    }, typeof icons.closeTabset === \"function\" ? icons.closeTabset(node) : icons.closeTabset));\n  }\n\n  toolbar = React.createElement(\"div\", {\n    key: \"toolbar\",\n    ref: toolbarRef,\n    className: cm(CLASSES.FLEXLAYOUT__TAB_TOOLBAR),\n    onMouseDown: onInterceptMouseDown,\n    onTouchStart: onInterceptMouseDown,\n    onDragStart: function onDragStart(e) {\n      e.preventDefault();\n    }\n  }, buttons);\n  var header;\n  var tabStrip;\n  var tabStripClasses = cm(CLASSES.FLEXLAYOUT__TABSET_TABBAR_OUTER);\n\n  if (node.getClassNameTabStrip() !== undefined) {\n    tabStripClasses += \" \" + node.getClassNameTabStrip();\n  }\n\n  tabStripClasses += \" \" + CLASSES.FLEXLAYOUT__TABSET_TABBAR_OUTER_ + node.getTabLocation();\n\n  if (node.isActive() && !showHeader) {\n    tabStripClasses += \" \" + cm(CLASSES.FLEXLAYOUT__TABSET_SELECTED);\n  }\n\n  if (node.isMaximized() && !showHeader) {\n    tabStripClasses += \" \" + cm(CLASSES.FLEXLAYOUT__TABSET_MAXIMIZED);\n  }\n\n  if (showHeader) {\n    var headerToolbar = React.createElement(\"div\", {\n      key: \"toolbar\",\n      ref: toolbarRef,\n      className: cm(CLASSES.FLEXLAYOUT__TAB_TOOLBAR),\n      onMouseDown: onInterceptMouseDown,\n      onTouchStart: onInterceptMouseDown,\n      onDragStart: function onDragStart(e) {\n        e.preventDefault();\n      }\n    }, headerButtons);\n    var tabHeaderClasses = cm(CLASSES.FLEXLAYOUT__TABSET_HEADER);\n\n    if (node.isActive()) {\n      tabHeaderClasses += \" \" + cm(CLASSES.FLEXLAYOUT__TABSET_SELECTED);\n    }\n\n    if (node.isMaximized()) {\n      tabHeaderClasses += \" \" + cm(CLASSES.FLEXLAYOUT__TABSET_MAXIMIZED);\n    }\n\n    if (node.getClassNameHeader() !== undefined) {\n      tabHeaderClasses += \" \" + node.getClassNameHeader();\n    }\n\n    header = React.createElement(\"div\", {\n      className: tabHeaderClasses,\n      style: {\n        height: node.getHeaderHeight() + \"px\"\n      },\n      \"data-layout-path\": path + \"/header\",\n      onMouseDown: onMouseDown,\n      onContextMenu: onContextMenu,\n      onClick: onAuxMouseClick,\n      onAuxClick: onAuxMouseClick,\n      onTouchStart: onMouseDown\n    }, React.createElement(\"div\", {\n      className: cm(CLASSES.FLEXLAYOUT__TABSET_HEADER_CONTENT)\n    }, headerContent), headerToolbar);\n  }\n\n  var tabStripStyle = {\n    height: node.getTabStripHeight() + \"px\"\n  };\n  tabStrip = React.createElement(\"div\", {\n    className: tabStripClasses,\n    style: tabStripStyle,\n    \"data-layout-path\": path + \"/tabstrip\",\n    onMouseDown: onMouseDown,\n    onContextMenu: onContextMenu,\n    onClick: onAuxMouseClick,\n    onAuxClick: onAuxMouseClick,\n    onTouchStart: onMouseDown\n  }, React.createElement(\"div\", {\n    ref: tabbarInnerRef,\n    className: cm(CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER) + \" \" + cm(CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER_ + node.getTabLocation())\n  }, React.createElement(\"div\", {\n    style: {\n      left: position\n    },\n    className: cm(CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER_TAB_CONTAINER) + \" \" + cm(CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER_TAB_CONTAINER_ + node.getTabLocation())\n  }, tabs)), toolbar);\n  style = layout.styleFont(style);\n  var placeHolder = undefined;\n\n  if (node.getChildren().length === 0) {\n    var placeHolderCallback = layout.getTabSetPlaceHolderCallback();\n\n    if (placeHolderCallback) {\n      placeHolder = placeHolderCallback(node);\n    }\n  }\n\n  var center = React.createElement(\"div\", {\n    className: cm(CLASSES.FLEXLAYOUT__TABSET_CONTENT)\n  }, placeHolder);\n  var content;\n\n  if (node.getTabLocation() === \"top\") {\n    content = React.createElement(React.Fragment, null, header, tabStrip, center);\n  } else {\n    content = React.createElement(React.Fragment, null, header, center, tabStrip);\n  }\n\n  return React.createElement(\"div\", {\n    ref: selfRef,\n    dir: \"ltr\",\n    \"data-layout-path\": path,\n    style: style,\n    className: cm(CLASSES.FLEXLAYOUT__TABSET),\n    onWheel: onMouseWheel\n  }, content);\n};","map":null,"metadata":{},"sourceType":"module"}