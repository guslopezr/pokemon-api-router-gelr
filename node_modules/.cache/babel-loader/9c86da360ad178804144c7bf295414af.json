{"ast":null,"code":"import * as React from \"react\";\nimport { DockLocation } from \"../DockLocation\";\nimport { BorderButton } from \"./BorderButton\";\nimport { showPopup } from \"../PopupMenu\";\nimport { Actions } from \"../model/Actions\";\nimport { I18nLabel } from \"../I18nLabel\";\nimport { useTabOverflow } from \"./TabOverflowHook\";\nimport { Orientation } from \"../Orientation\";\nimport { CLASSES } from \"../Types\";\nimport { isAuxMouseEvent } from \"./Utils\";\n/** @internal */\n\nexport var BorderTabSet = function BorderTabSet(props) {\n  var border = props.border,\n      layout = props.layout,\n      iconFactory = props.iconFactory,\n      titleFactory = props.titleFactory,\n      icons = props.icons,\n      path = props.path;\n  var toolbarRef = React.useRef(null);\n  var overflowbuttonRef = React.useRef(null);\n  var stickyButtonsRef = React.useRef(null);\n\n  var _useTabOverflow = useTabOverflow(border, Orientation.flip(border.getOrientation()), toolbarRef, stickyButtonsRef),\n      selfRef = _useTabOverflow.selfRef,\n      position = _useTabOverflow.position,\n      userControlledLeft = _useTabOverflow.userControlledLeft,\n      hiddenTabs = _useTabOverflow.hiddenTabs,\n      onMouseWheel = _useTabOverflow.onMouseWheel;\n\n  var onAuxMouseClick = function onAuxMouseClick(event) {\n    if (isAuxMouseEvent(event)) {\n      layout.auxMouseClick(border, event);\n    }\n  };\n\n  var onContextMenu = function onContextMenu(event) {\n    layout.showContextMenu(border, event);\n  };\n\n  var onInterceptMouseDown = function onInterceptMouseDown(event) {\n    event.stopPropagation();\n  };\n\n  var onOverflowClick = function onOverflowClick(event) {\n    var callback = layout.getShowOverflowMenu();\n\n    if (callback !== undefined) {\n      callback(border, event, hiddenTabs, onOverflowItemSelect);\n    } else {\n      var element = overflowbuttonRef.current;\n      showPopup(element, hiddenTabs, onOverflowItemSelect, layout, iconFactory, titleFactory);\n    }\n\n    event.stopPropagation();\n  };\n\n  var onOverflowItemSelect = function onOverflowItemSelect(item) {\n    layout.doAction(Actions.selectTab(item.node.getId()));\n    userControlledLeft.current = false;\n  };\n\n  var onFloatTab = function onFloatTab(event) {\n    var selectedTabNode = border.getChildren()[border.getSelected()];\n\n    if (selectedTabNode !== undefined) {\n      layout.doAction(Actions.floatTab(selectedTabNode.getId()));\n    }\n\n    event.stopPropagation();\n  };\n\n  var cm = layout.getClassName;\n  var style = border.getTabHeaderRect().styleWithPosition({});\n  var tabs = [];\n\n  var layoutTab = function layoutTab(i) {\n    var isSelected = border.getSelected() === i;\n    var child = border.getChildren()[i];\n    tabs.push(React.createElement(BorderButton, {\n      layout: layout,\n      border: border.getLocation().getName(),\n      node: child,\n      path: path + \"/tb\" + i,\n      key: child.getId(),\n      selected: isSelected,\n      iconFactory: iconFactory,\n      titleFactory: titleFactory,\n      icons: icons\n    }));\n\n    if (i < border.getChildren().length - 1) {\n      tabs.push(React.createElement(\"div\", {\n        key: \"divider\" + i,\n        className: cm(CLASSES.FLEXLAYOUT__BORDER_TAB_DIVIDER)\n      }));\n    }\n  };\n\n  for (var i = 0; i < border.getChildren().length; i++) {\n    layoutTab(i);\n  }\n\n  var borderClasses = cm(CLASSES.FLEXLAYOUT__BORDER) + \" \" + cm(CLASSES.FLEXLAYOUT__BORDER_ + border.getLocation().getName());\n\n  if (border.getClassName() !== undefined) {\n    borderClasses += \" \" + border.getClassName();\n  } // allow customization of tabset right/bottom buttons\n\n\n  var buttons = [];\n  var renderState = {\n    headerContent: undefined,\n    buttons: buttons,\n    stickyButtons: [],\n    headerButtons: []\n  };\n  layout.customizeTabSet(border, renderState);\n  buttons = renderState.buttons;\n  var toolbar;\n\n  if (hiddenTabs.length > 0) {\n    var overflowTitle = layout.i18nName(I18nLabel.Overflow_Menu_Tooltip);\n    var overflowContent;\n\n    if (typeof icons.more === \"function\") {\n      overflowContent = icons.more(border, hiddenTabs);\n    } else {\n      overflowContent = React.createElement(React.Fragment, null, icons.more, React.createElement(\"div\", {\n        className: cm(CLASSES.FLEXLAYOUT__TAB_BUTTON_OVERFLOW_COUNT)\n      }, hiddenTabs.length));\n    }\n\n    buttons.push(React.createElement(\"button\", {\n      key: \"overflowbutton\",\n      ref: overflowbuttonRef,\n      className: cm(CLASSES.FLEXLAYOUT__BORDER_TOOLBAR_BUTTON) + \" \" + cm(CLASSES.FLEXLAYOUT__BORDER_TOOLBAR_BUTTON_OVERFLOW) + \" \" + cm(CLASSES.FLEXLAYOUT__BORDER_TOOLBAR_BUTTON_OVERFLOW_ + border.getLocation().getName()),\n      title: overflowTitle,\n      onClick: onOverflowClick,\n      onMouseDown: onInterceptMouseDown,\n      onTouchStart: onInterceptMouseDown\n    }, overflowContent));\n  }\n\n  var selectedIndex = border.getSelected();\n\n  if (selectedIndex !== -1) {\n    var selectedTabNode = border.getChildren()[selectedIndex];\n\n    if (selectedTabNode !== undefined && layout.isSupportsPopout() && selectedTabNode.isEnableFloat() && !selectedTabNode.isFloating()) {\n      var floatTitle = layout.i18nName(I18nLabel.Float_Tab);\n      buttons.push(React.createElement(\"button\", {\n        key: \"float\",\n        title: floatTitle,\n        className: cm(CLASSES.FLEXLAYOUT__BORDER_TOOLBAR_BUTTON) + \" \" + cm(CLASSES.FLEXLAYOUT__BORDER_TOOLBAR_BUTTON_FLOAT),\n        onClick: onFloatTab,\n        onMouseDown: onInterceptMouseDown,\n        onTouchStart: onInterceptMouseDown\n      }, typeof icons.popout === \"function\" ? icons.popout(selectedTabNode) : icons.popout));\n    }\n  }\n\n  toolbar = React.createElement(\"div\", {\n    key: \"toolbar\",\n    ref: toolbarRef,\n    className: cm(CLASSES.FLEXLAYOUT__BORDER_TOOLBAR) + \" \" + cm(CLASSES.FLEXLAYOUT__BORDER_TOOLBAR_ + border.getLocation().getName())\n  }, buttons);\n  style = layout.styleFont(style);\n  var innerStyle = {};\n  var borderHeight = border.getBorderBarSize() - 1;\n\n  if (border.getLocation() === DockLocation.LEFT) {\n    innerStyle = {\n      right: borderHeight,\n      height: borderHeight,\n      top: position\n    };\n  } else if (border.getLocation() === DockLocation.RIGHT) {\n    innerStyle = {\n      left: borderHeight,\n      height: borderHeight,\n      top: position\n    };\n  } else {\n    innerStyle = {\n      height: borderHeight,\n      left: position\n    };\n  }\n\n  return React.createElement(\"div\", {\n    ref: selfRef,\n    dir: \"ltr\",\n    style: style,\n    className: borderClasses,\n    \"data-layout-path\": path,\n    onClick: onAuxMouseClick,\n    onAuxClick: onAuxMouseClick,\n    onContextMenu: onContextMenu,\n    onWheel: onMouseWheel\n  }, React.createElement(\"div\", {\n    style: {\n      height: borderHeight\n    },\n    className: cm(CLASSES.FLEXLAYOUT__BORDER_INNER) + \" \" + cm(CLASSES.FLEXLAYOUT__BORDER_INNER_ + border.getLocation().getName())\n  }, React.createElement(\"div\", {\n    style: innerStyle,\n    className: cm(CLASSES.FLEXLAYOUT__BORDER_INNER_TAB_CONTAINER) + \" \" + cm(CLASSES.FLEXLAYOUT__BORDER_INNER_TAB_CONTAINER_ + border.getLocation().getName())\n  }, tabs)), toolbar);\n};","map":null,"metadata":{},"sourceType":"module"}