{"ast":null,"code":"import * as React from \"react\";\nimport { DragDrop } from \"../DragDrop\";\nimport { Actions } from \"../model/Actions\";\nimport { BorderNode } from \"../model/BorderNode\";\nimport { Orientation } from \"../Orientation\";\nimport { CLASSES } from \"../Types\";\n/** @internal */\n\nexport var Splitter = function Splitter(props) {\n  var layout = props.layout,\n      node = props.node,\n      path = props.path;\n  var pBounds = React.useRef([]);\n  var outlineDiv = React.useRef(undefined);\n  var parentNode = node.getParent();\n\n  var onMouseDown = function onMouseDown(event) {\n    DragDrop.instance.setGlassCursorOverride(node.getOrientation() === Orientation.HORZ ? \"ns-resize\" : \"ew-resize\");\n    DragDrop.instance.startDrag(event, onDragStart, onDragMove, onDragEnd, onDragCancel, undefined, undefined, layout.getCurrentDocument(), layout.getRootDiv());\n    pBounds.current = parentNode._getSplitterBounds(node, true);\n    var rootdiv = layout.getRootDiv();\n    outlineDiv.current = layout.getCurrentDocument().createElement(\"div\");\n    outlineDiv.current.style.position = \"absolute\";\n    outlineDiv.current.className = layout.getClassName(CLASSES.FLEXLAYOUT__SPLITTER_DRAG);\n    outlineDiv.current.style.cursor = node.getOrientation() === Orientation.HORZ ? \"ns-resize\" : \"ew-resize\";\n    var r = node.getRect();\n\n    if (node.getOrientation() === Orientation.VERT && r.width < 2) {\n      r.width = 2;\n    } else if (node.getOrientation() === Orientation.HORZ && r.height < 2) {\n      r.height = 2;\n    }\n\n    r.positionElement(outlineDiv.current);\n    rootdiv.appendChild(outlineDiv.current);\n  };\n\n  var onDragCancel = function onDragCancel(wasDragging) {\n    var rootdiv = layout.getRootDiv();\n    rootdiv.removeChild(outlineDiv.current);\n  };\n\n  var onDragStart = function onDragStart() {\n    return true;\n  };\n\n  var onDragMove = function onDragMove(event) {\n    var clientRect = layout.getDomRect();\n    var pos = {\n      x: event.clientX - clientRect.left,\n      y: event.clientY - clientRect.top\n    };\n\n    if (outlineDiv) {\n      if (node.getOrientation() === Orientation.HORZ) {\n        outlineDiv.current.style.top = getBoundPosition(pos.y - 4) + \"px\";\n      } else {\n        outlineDiv.current.style.left = getBoundPosition(pos.x - 4) + \"px\";\n      }\n    }\n\n    if (layout.isRealtimeResize()) {\n      updateLayout();\n    }\n  };\n\n  var updateLayout = function updateLayout() {\n    var value = 0;\n\n    if (outlineDiv) {\n      if (node.getOrientation() === Orientation.HORZ) {\n        value = outlineDiv.current.offsetTop;\n      } else {\n        value = outlineDiv.current.offsetLeft;\n      }\n    }\n\n    if (parentNode instanceof BorderNode) {\n      var pos = parentNode._calculateSplit(node, value);\n\n      layout.doAction(Actions.adjustBorderSplit(node.getParent().getId(), pos));\n    } else {\n      var splitSpec = parentNode._calculateSplit(node, value);\n\n      if (splitSpec !== undefined) {\n        layout.doAction(Actions.adjustSplit(splitSpec));\n      }\n    }\n  };\n\n  var onDragEnd = function onDragEnd() {\n    updateLayout();\n    var rootdiv = layout.getRootDiv();\n    rootdiv.removeChild(outlineDiv.current);\n  };\n\n  var getBoundPosition = function getBoundPosition(p) {\n    var bounds = pBounds.current;\n    var rtn = p;\n\n    if (p < bounds[0]) {\n      rtn = bounds[0];\n    }\n\n    if (p > bounds[1]) {\n      rtn = bounds[1];\n    }\n\n    return rtn;\n  };\n\n  var cm = layout.getClassName;\n  var r = node.getRect();\n  var style = r.styleWithPosition({\n    cursor: node.getOrientation() === Orientation.HORZ ? \"ns-resize\" : \"ew-resize\"\n  });\n  var className = cm(CLASSES.FLEXLAYOUT__SPLITTER) + \" \" + cm(CLASSES.FLEXLAYOUT__SPLITTER_ + node.getOrientation().getName());\n\n  if (parentNode instanceof BorderNode) {\n    className += \" \" + cm(CLASSES.FLEXLAYOUT__SPLITTER_BORDER);\n  } else {\n    if (node.getModel().getMaximizedTabset() !== undefined) {\n      style.display = \"none\";\n    }\n  }\n\n  var extra = node.getModel().getSplitterExtra();\n\n  if (extra === 0) {\n    return React.createElement(\"div\", {\n      style: style,\n      \"data-layout-path\": path,\n      className: className,\n      onTouchStart: onMouseDown,\n      onMouseDown: onMouseDown\n    });\n  } else {\n    // add extended transparent div for hit testing\n    // extends forward only, so as not to interfere with scrollbars\n    var r2 = r.clone();\n    r2.x = 0;\n    r2.y = 0;\n\n    if (node.getOrientation() === Orientation.VERT) {\n      r2.width += extra;\n    } else {\n      r2.height += extra;\n    }\n\n    var style2 = r2.styleWithPosition({\n      cursor: node.getOrientation() === Orientation.HORZ ? \"ns-resize\" : \"ew-resize\"\n    });\n    var className2 = cm(CLASSES.FLEXLAYOUT__SPLITTER_EXTRA);\n    return React.createElement(\"div\", {\n      style: style,\n      \"data-layout-path\": path,\n      className: className\n    }, React.createElement(\"div\", {\n      style: style2,\n      className: className2,\n      onTouchStart: onMouseDown,\n      onMouseDown: onMouseDown\n    }));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}