{"ast":null,"code":"import _classCallCheck from \"/Users/gustavolopez/Documents/Personal GLR/Curso Desafio Latam/MOD REACT 7 ROUTER 2/poke-api router gelr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gustavolopez/Documents/Personal GLR/Curso Desafio Latam/MOD REACT 7 ROUTER 2/poke-api router gelr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Orientation } from \"../Orientation\";\nimport { BorderNode } from \"./BorderNode\";\nexport var BorderSet = /*#__PURE__*/function () {\n  /** @internal */\n  function BorderSet(model) {\n    _classCallCheck(this, BorderSet);\n\n    this._model = model;\n    this._borders = [];\n  }\n  /** @internal */\n\n\n  _createClass(BorderSet, [{\n    key: \"getBorders\",\n    value: function getBorders() {\n      return this._borders;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_forEachNode\",\n    value: function _forEachNode(fn) {\n      var _iterator = _createForOfIteratorHelper(this._borders),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var borderNode = _step.value;\n          fn(borderNode, 0);\n\n          var _iterator2 = _createForOfIteratorHelper(borderNode.getChildren()),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var node = _step2.value;\n\n              node._forEachNode(fn, 1);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"_toJson\",\n    value: function _toJson() {\n      return this._borders.map(function (borderNode) {\n        return borderNode.toJson();\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"_layoutBorder\",\n    value: function _layoutBorder(outerInnerRects, metrics) {\n      var rect = outerInnerRects.outer;\n\n      var rootRow = this._model.getRoot();\n\n      var height = Math.max(0, rect.height - rootRow.getMinHeight());\n      var width = Math.max(0, rect.width - rootRow.getMinWidth());\n      var sumHeight = 0;\n      var sumWidth = 0;\n      var adjustableHeight = 0;\n      var adjustableWidth = 0;\n\n      var showingBorders = this._borders.filter(function (border) {\n        return border.isShowing();\n      }); // sum size of borders to see they will fit\n\n\n      var _iterator3 = _createForOfIteratorHelper(showingBorders),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _border = _step3.value;\n\n          _border._setAdjustedSize(_border.getSize());\n\n          var visible = _border.getSelected() !== -1;\n\n          if (_border.getLocation().getOrientation() === Orientation.HORZ) {\n            sumWidth += _border.getBorderBarSize();\n\n            if (visible) {\n              width -= this._model.getSplitterSize();\n              sumWidth += _border.getSize();\n              adjustableWidth += _border.getSize();\n            }\n          } else {\n            sumHeight += _border.getBorderBarSize();\n\n            if (visible) {\n              height -= this._model.getSplitterSize();\n              sumHeight += _border.getSize();\n              adjustableHeight += _border.getSize();\n            }\n          }\n        } // adjust border sizes if too large\n\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var j = 0;\n      var adjusted = false;\n\n      while (sumWidth > width && adjustableWidth > 0 || sumHeight > height && adjustableHeight > 0) {\n        var border = showingBorders[j];\n\n        if (border.getSelected() !== -1) {\n          // visible\n          var size = border._getAdjustedSize();\n\n          if (sumWidth > width && adjustableWidth > 0 && border.getLocation().getOrientation() === Orientation.HORZ && size > 0 && size > border.getMinSize()) {\n            border._setAdjustedSize(size - 1);\n\n            sumWidth--;\n            adjustableWidth--;\n            adjusted = true;\n          } else if (sumHeight > height && adjustableHeight > 0 && border.getLocation().getOrientation() === Orientation.VERT && size > 0 && size > border.getMinSize()) {\n            border._setAdjustedSize(size - 1);\n\n            sumHeight--;\n            adjustableHeight--;\n            adjusted = true;\n          }\n        }\n\n        j = (j + 1) % showingBorders.length;\n\n        if (j === 0) {\n          if (adjusted) {\n            adjusted = false;\n          } else {\n            break;\n          }\n        }\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(showingBorders),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _border2 = _step4.value;\n          outerInnerRects.outer = _border2._layoutBorderOuter(outerInnerRects.outer, metrics);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      outerInnerRects.inner = outerInnerRects.outer;\n\n      var _iterator5 = _createForOfIteratorHelper(showingBorders),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _border3 = _step5.value;\n          outerInnerRects.inner = _border3._layoutBorderInner(outerInnerRects.inner, metrics);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return outerInnerRects;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_findDropTargetNode\",\n    value: function _findDropTargetNode(dragNode, x, y) {\n      var _iterator6 = _createForOfIteratorHelper(this._borders),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var border = _step6.value;\n\n          if (border.isShowing()) {\n            var dropInfo = border.canDrop(dragNode, x, y);\n\n            if (dropInfo !== undefined) {\n              return dropInfo;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return undefined;\n    }\n  }], [{\n    key: \"_fromJson\",\n    value: function _fromJson(json, model) {\n      var borderSet = new BorderSet(model);\n      borderSet._borders = json.map(function (borderJson) {\n        return BorderNode._fromJson(borderJson, model);\n      });\n      return borderSet;\n    }\n  }]);\n\n  return BorderSet;\n}();","map":null,"metadata":{},"sourceType":"module"}