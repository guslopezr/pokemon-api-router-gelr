{"ast":null,"code":"import _classCallCheck from \"/Users/gustavolopez/Documents/Personal GLR/Curso Desafio Latam/MOD REACT 7 ROUTER 2/poke-api router gelr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gustavolopez/Documents/Personal GLR/Curso Desafio Latam/MOD REACT 7 ROUTER 2/poke-api router gelr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Rect } from \"./Rect\";\n/** @internal */\n\nvar canUseDOM = !!(typeof window !== \"undefined\" && window.document && window.document.createElement);\nexport var DragDrop = /*#__PURE__*/function () {\n  /** @internal */\n  function DragDrop() {\n    _classCallCheck(this, DragDrop);\n\n    /** @internal */\n    this._manualGlassManagement = false;\n    /** @internal */\n\n    this._startX = 0;\n    /** @internal */\n\n    this._startY = 0;\n    /** @internal */\n\n    this._dragDepth = 0;\n    /** @internal */\n\n    this._glassShowing = false;\n    /** @internal */\n\n    this._dragging = false;\n    /** @internal */\n\n    this._active = false; // drag and drop is in progress, can be used on ios to prevent body scrolling (see demo)\n\n    if (canUseDOM) {\n      // check for serverside rendering\n      this._glass = document.createElement(\"div\");\n      this._glass.style.zIndex = \"998\";\n      this._glass.style.backgroundColor = \"transparent\";\n      this._glass.style.outline = \"none\";\n    }\n\n    this._defaultGlassCursor = \"default\";\n    this._onMouseMove = this._onMouseMove.bind(this);\n    this._onMouseUp = this._onMouseUp.bind(this);\n    this._onKeyPress = this._onKeyPress.bind(this);\n    this._onDragCancel = this._onDragCancel.bind(this);\n    this._onDragEnter = this._onDragEnter.bind(this);\n    this._onDragLeave = this._onDragLeave.bind(this);\n    this.resizeGlass = this.resizeGlass.bind(this);\n    this._lastClick = 0;\n    this._clickX = 0;\n    this._clickY = 0;\n  } // if you add the glass pane then you should remove it\n\n\n  _createClass(DragDrop, [{\n    key: \"addGlass\",\n    value: function addGlass(fCancel) {\n      var _a;\n\n      if (!this._glassShowing) {\n        if (!this._document) {\n          this._document = window.document;\n        }\n\n        if (!this._rootElement) {\n          this._rootElement = this._document.body;\n        }\n\n        this.resizeGlass();\n        (_a = this._document.defaultView) === null || _a === void 0 ? void 0 : _a.addEventListener('resize', this.resizeGlass);\n\n        this._document.body.appendChild(this._glass);\n\n        this._glass.tabIndex = -1;\n\n        this._glass.focus();\n\n        this._glass.addEventListener(\"keydown\", this._onKeyPress);\n\n        this._glass.addEventListener(\"dragenter\", this._onDragEnter, {\n          passive: false\n        });\n\n        this._glass.addEventListener(\"dragover\", this._onMouseMove, {\n          passive: false\n        });\n\n        this._glass.addEventListener(\"dragleave\", this._onDragLeave, {\n          passive: false\n        });\n\n        this._glassShowing = true;\n        this._fDragCancel = fCancel;\n        this._manualGlassManagement = false;\n      } else {\n        // second call to addGlass (via dragstart)\n        this._manualGlassManagement = true;\n      }\n    }\n  }, {\n    key: \"resizeGlass\",\n    value: function resizeGlass() {\n      var glassRect = Rect.fromElement(this._rootElement);\n      glassRect.positionElement(this._glass, \"fixed\");\n    }\n  }, {\n    key: \"hideGlass\",\n    value: function hideGlass() {\n      var _a;\n\n      if (this._glassShowing) {\n        this._document.body.removeChild(this._glass);\n\n        (_a = this._document.defaultView) === null || _a === void 0 ? void 0 : _a.removeEventListener('resize', this.resizeGlass);\n        this._glassShowing = false;\n        this._document = undefined;\n        this._rootElement = undefined;\n        this.setGlassCursorOverride(undefined);\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"_updateGlassCursor\",\n    value: function _updateGlassCursor() {\n      var _a;\n\n      this._glass.style.cursor = (_a = this._glassCursorOverride) !== null && _a !== void 0 ? _a : this._defaultGlassCursor;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_setDefaultGlassCursor\",\n    value: function _setDefaultGlassCursor(cursor) {\n      this._defaultGlassCursor = cursor;\n\n      this._updateGlassCursor();\n    }\n  }, {\n    key: \"setGlassCursorOverride\",\n    value: function setGlassCursorOverride(cursor) {\n      this._glassCursorOverride = cursor;\n\n      this._updateGlassCursor();\n    }\n  }, {\n    key: \"startDrag\",\n    value: function startDrag(event, fDragStart, fDragMove, fDragEnd, fDragCancel, fClick, fDblClick, currentDocument, rootElement) {\n      // prevent 'duplicate' action (mouse event for same action as previous touch event (a fix for ios))\n      if (event && this._lastEvent && this._lastEvent.type.startsWith(\"touch\") && event.type.startsWith(\"mouse\") && event.timeStamp - this._lastEvent.timeStamp < 500) {\n        return;\n      }\n\n      this._lastEvent = event;\n\n      if (currentDocument) {\n        this._document = currentDocument;\n      } else {\n        this._document = window.document;\n      }\n\n      if (rootElement) {\n        this._rootElement = rootElement;\n      } else {\n        this._rootElement = this._document.body;\n      }\n\n      var posEvent = this._getLocationEvent(event);\n\n      this.addGlass(fDragCancel);\n\n      if (this._dragging) {\n        console.warn(\"this._dragging true on startDrag should never happen\");\n      }\n\n      if (event) {\n        this._startX = posEvent.clientX;\n        this._startY = posEvent.clientY;\n\n        if (!window.matchMedia || window.matchMedia(\"(pointer: fine)\").matches) {\n          this._setDefaultGlassCursor(getComputedStyle(event.target).cursor);\n        }\n\n        this._stopPropagation(event);\n\n        this._preventDefault(event);\n      } else {\n        this._startX = 0;\n        this._startY = 0;\n\n        this._setDefaultGlassCursor(\"default\");\n      }\n\n      this._dragging = false;\n      this._fDragStart = fDragStart;\n      this._fDragMove = fDragMove;\n      this._fDragEnd = fDragEnd;\n      this._fDragCancel = fDragCancel;\n      this._fClick = fClick;\n      this._fDblClick = fDblClick;\n      this._active = true;\n\n      if ((event === null || event === void 0 ? void 0 : event.type) === 'dragenter') {\n        this._dragDepth = 1;\n\n        this._rootElement.addEventListener(\"dragenter\", this._onDragEnter, {\n          passive: false\n        });\n\n        this._rootElement.addEventListener(\"dragover\", this._onMouseMove, {\n          passive: false\n        });\n\n        this._rootElement.addEventListener(\"dragleave\", this._onDragLeave, {\n          passive: false\n        });\n\n        this._document.addEventListener(\"dragend\", this._onDragCancel, {\n          passive: false\n        });\n\n        this._document.addEventListener(\"drop\", this._onMouseUp, {\n          passive: false\n        });\n      } else {\n        this._document.addEventListener(\"mouseup\", this._onMouseUp, {\n          passive: false\n        });\n\n        this._document.addEventListener(\"mousemove\", this._onMouseMove, {\n          passive: false\n        });\n\n        this._document.addEventListener(\"touchend\", this._onMouseUp, {\n          passive: false\n        });\n\n        this._document.addEventListener(\"touchmove\", this._onMouseMove, {\n          passive: false\n        });\n      }\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._dragging;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this._active;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var rtn = \"(DragDrop: \" + \"startX=\" + this._startX + \", startY=\" + this._startY + \", dragging=\" + this._dragging + \")\";\n      return rtn;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_onKeyPress\",\n    value: function _onKeyPress(event) {\n      if (event.keyCode === 27) {\n        // esc\n        this._onDragCancel();\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"_onDragCancel\",\n    value: function _onDragCancel() {\n      this._rootElement.removeEventListener(\"dragenter\", this._onDragEnter);\n\n      this._rootElement.removeEventListener(\"dragover\", this._onMouseMove);\n\n      this._rootElement.removeEventListener(\"dragleave\", this._onDragLeave);\n\n      this._document.removeEventListener(\"dragend\", this._onDragCancel);\n\n      this._document.removeEventListener(\"drop\", this._onMouseUp);\n\n      this._document.removeEventListener(\"mousemove\", this._onMouseMove);\n\n      this._document.removeEventListener(\"mouseup\", this._onMouseUp);\n\n      this._document.removeEventListener(\"touchend\", this._onMouseUp);\n\n      this._document.removeEventListener(\"touchmove\", this._onMouseMove);\n\n      this.hideGlass();\n\n      if (this._fDragCancel !== undefined) {\n        this._fDragCancel(this._dragging);\n      }\n\n      this._dragging = false;\n      this._active = false;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_getLocationEvent\",\n    value: function _getLocationEvent(event) {\n      var posEvent = event;\n\n      if (event && event.touches) {\n        posEvent = event.touches[0];\n      }\n\n      return posEvent;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_getLocationEventEnd\",\n    value: function _getLocationEventEnd(event) {\n      var posEvent = event;\n\n      if (event.changedTouches) {\n        posEvent = event.changedTouches[0];\n      }\n\n      return posEvent;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_stopPropagation\",\n    value: function _stopPropagation(event) {\n      if (event.stopPropagation) {\n        event.stopPropagation();\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"_preventDefault\",\n    value: function _preventDefault(event) {\n      if (event.preventDefault && event.cancelable) {\n        event.preventDefault();\n      }\n\n      return event;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_onMouseMove\",\n    value: function _onMouseMove(event) {\n      this._lastEvent = event;\n\n      var posEvent = this._getLocationEvent(event);\n\n      this._stopPropagation(event);\n\n      this._preventDefault(event);\n\n      if (!this._dragging && (Math.abs(this._startX - posEvent.clientX) > 5 || Math.abs(this._startY - posEvent.clientY) > 5)) {\n        this._dragging = true;\n\n        if (this._fDragStart) {\n          this._setDefaultGlassCursor(\"move\");\n\n          this._dragging = this._fDragStart({\n            clientX: this._startX,\n            clientY: this._startY\n          });\n        }\n      }\n\n      if (this._dragging) {\n        if (this._fDragMove) {\n          this._fDragMove(posEvent);\n        }\n      }\n\n      return false;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_onMouseUp\",\n    value: function _onMouseUp(event) {\n      this._lastEvent = event;\n\n      var posEvent = this._getLocationEventEnd(event);\n\n      this._stopPropagation(event);\n\n      this._preventDefault(event);\n\n      this._active = false;\n\n      this._rootElement.removeEventListener(\"dragenter\", this._onDragEnter);\n\n      this._rootElement.removeEventListener(\"dragover\", this._onMouseMove);\n\n      this._rootElement.removeEventListener(\"dragleave\", this._onDragLeave);\n\n      this._document.removeEventListener(\"dragend\", this._onDragCancel);\n\n      this._document.removeEventListener(\"drop\", this._onMouseUp);\n\n      this._document.removeEventListener(\"mousemove\", this._onMouseMove);\n\n      this._document.removeEventListener(\"mouseup\", this._onMouseUp);\n\n      this._document.removeEventListener(\"touchend\", this._onMouseUp);\n\n      this._document.removeEventListener(\"touchmove\", this._onMouseMove);\n\n      if (!this._manualGlassManagement) {\n        this.hideGlass();\n      }\n\n      if (this._dragging) {\n        this._dragging = false;\n\n        if (this._fDragEnd) {\n          this._fDragEnd(event);\n        } // dump(\"set dragging = false\\n\");\n\n      } else {\n        if (this._fDragCancel) {\n          this._fDragCancel(this._dragging);\n        }\n\n        if (Math.abs(this._startX - posEvent.clientX) <= 5 && Math.abs(this._startY - posEvent.clientY) <= 5) {\n          var isDoubleClick = false;\n          var clickTime = new Date().getTime(); // check for double click\n\n          if (Math.abs(this._clickX - posEvent.clientX) <= 5 && Math.abs(this._clickY - posEvent.clientY) <= 5) {\n            if (clickTime - this._lastClick < 500) {\n              if (this._fDblClick) {\n                this._fDblClick(event);\n\n                isDoubleClick = true;\n              }\n            }\n          }\n\n          if (!isDoubleClick && this._fClick) {\n            this._fClick(event);\n          }\n\n          this._lastClick = clickTime;\n          this._clickX = posEvent.clientX;\n          this._clickY = posEvent.clientY;\n        }\n      }\n\n      return false;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_onDragEnter\",\n    value: function _onDragEnter(event) {\n      this._preventDefault(event);\n\n      this._stopPropagation(event);\n\n      this._dragDepth++;\n      return false;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_onDragLeave\",\n    value: function _onDragLeave(event) {\n      this._preventDefault(event);\n\n      this._stopPropagation(event);\n\n      this._dragDepth--;\n\n      if (this._dragDepth <= 0) {\n        this._onDragCancel();\n      }\n\n      return false;\n    }\n  }]);\n\n  return DragDrop;\n}();\nDragDrop.instance = new DragDrop();","map":null,"metadata":{},"sourceType":"module"}