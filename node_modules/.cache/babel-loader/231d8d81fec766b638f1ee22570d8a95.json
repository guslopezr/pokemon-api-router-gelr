{"ast":null,"code":"import _classCallCheck from \"/Users/gustavolopez/Documents/Personal GLR/Curso Desafio Latam/MOD REACT 7 ROUTER 2/poke-api router gelr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gustavolopez/Documents/Personal GLR/Curso Desafio Latam/MOD REACT 7 ROUTER 2/poke-api router gelr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { DockLocation } from \"../DockLocation\";\nimport { Orientation } from \"../Orientation\";\nimport { Rect } from \"../Rect\";\nexport var Node = /*#__PURE__*/function () {\n  /** @internal */\n  function Node(model) {\n    _classCallCheck(this, Node);\n\n    /** @internal */\n    this._dirty = false;\n    /** @internal */\n\n    this._tempSize = 0;\n    this._model = model;\n    this._attributes = {};\n    this._children = [];\n    this._fixed = false;\n    this._rect = Rect.empty();\n    this._visible = false;\n    this._listeners = {};\n  }\n\n  _createClass(Node, [{\n    key: \"getId\",\n    value: function getId() {\n      var id = this._attributes.id;\n\n      if (id !== undefined) {\n        return id;\n      }\n\n      id = this._model._nextUniqueId();\n\n      this._setId(id);\n\n      return id;\n    }\n  }, {\n    key: \"getModel\",\n    value: function getModel() {\n      return this._model;\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return this._attributes.type;\n    }\n  }, {\n    key: \"getParent\",\n    value: function getParent() {\n      return this._parent;\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      return this._children;\n    }\n  }, {\n    key: \"getRect\",\n    value: function getRect() {\n      return this._rect;\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._visible;\n    }\n  }, {\n    key: \"getOrientation\",\n    value: function getOrientation() {\n      if (this._parent === undefined) {\n        return this._model.isRootOrientationVertical() ? Orientation.VERT : Orientation.HORZ;\n      } else {\n        return Orientation.flip(this._parent.getOrientation());\n      }\n    } // event can be: resize, visibility, maximize (on tabset), close\n\n  }, {\n    key: \"setEventListener\",\n    value: function setEventListener(event, callback) {\n      this._listeners[event] = callback;\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(event) {\n      delete this._listeners[event];\n    }\n    /** @internal */\n\n  }, {\n    key: \"_setId\",\n    value: function _setId(id) {\n      this._attributes.id = id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_fireEvent\",\n    value: function _fireEvent(event, params) {\n      // console.log(this._type, \" fireEvent \" + event + \" \" + JSON.stringify(params));\n      if (this._listeners[event] !== undefined) {\n        this._listeners[event](params);\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"_getAttr\",\n    value: function _getAttr(name) {\n      var val = this._attributes[name];\n\n      if (val === undefined) {\n        var modelName = this._getAttributeDefinitions().getModelName(name);\n\n        if (modelName !== undefined) {\n          val = this._model._getAttribute(modelName);\n        }\n      } // console.log(name + \"=\" + val);\n\n\n      return val;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_forEachNode\",\n    value: function _forEachNode(fn, level) {\n      fn(this, level);\n      level++;\n\n      var _iterator = _createForOfIteratorHelper(this._children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n\n          node._forEachNode(fn, level);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"_setVisible\",\n    value: function _setVisible(visible) {\n      if (visible !== this._visible) {\n        this._fireEvent(\"visibility\", {\n          visible: visible\n        });\n\n        this._visible = visible;\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"_getDrawChildren\",\n    value: function _getDrawChildren() {\n      return this._children;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_setParent\",\n    value: function _setParent(parent) {\n      this._parent = parent;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_setRect\",\n    value: function _setRect(rect) {\n      this._rect = rect;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_setWeight\",\n    value: function _setWeight(weight) {\n      this._attributes.weight = weight;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_setSelected\",\n    value: function _setSelected(index) {\n      this._attributes.selected = index;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_isFixed\",\n    value: function _isFixed() {\n      return this._fixed;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_layout\",\n    value: function _layout(rect, metrics) {\n      this._rect = rect;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_findDropTargetNode\",\n    value: function _findDropTargetNode(dragNode, x, y) {\n      var rtn;\n\n      if (this._rect.contains(x, y)) {\n        if (this._model.getMaximizedTabset() !== undefined) {\n          rtn = this._model.getMaximizedTabset().canDrop(dragNode, x, y);\n        } else {\n          rtn = this.canDrop(dragNode, x, y);\n\n          if (rtn === undefined) {\n            if (this._children.length !== 0) {\n              var _iterator2 = _createForOfIteratorHelper(this._children),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var child = _step2.value;\n                  rtn = child._findDropTargetNode(dragNode, x, y);\n\n                  if (rtn !== undefined) {\n                    break;\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          }\n        }\n      }\n\n      return rtn;\n    }\n    /** @internal */\n\n  }, {\n    key: \"canDrop\",\n    value: function canDrop(dragNode, x, y) {\n      return undefined;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_canDockInto\",\n    value: function _canDockInto(dragNode, dropInfo) {\n      if (dropInfo != null) {\n        if (dropInfo.location === DockLocation.CENTER && dropInfo.node.isEnableDrop() === false) {\n          return false;\n        } // prevent named tabset docking into another tabset, since this would lose the header\n\n\n        if (dropInfo.location === DockLocation.CENTER && dragNode.getType() === \"tabset\" && dragNode.getName() !== undefined) {\n          return false;\n        }\n\n        if (dropInfo.location !== DockLocation.CENTER && dropInfo.node.isEnableDivide() === false) {\n          return false;\n        } // finally check model callback to check if drop allowed\n\n\n        if (this._model._getOnAllowDrop()) {\n          return this._model._getOnAllowDrop()(dragNode, dropInfo);\n        }\n      }\n\n      return true;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_removeChild\",\n    value: function _removeChild(childNode) {\n      var pos = this._children.indexOf(childNode);\n\n      if (pos !== -1) {\n        this._children.splice(pos, 1);\n      }\n\n      this._dirty = true;\n      return pos;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_addChild\",\n    value: function _addChild(childNode, pos) {\n      if (pos != null) {\n        this._children.splice(pos, 0, childNode);\n      } else {\n        this._children.push(childNode);\n\n        pos = this._children.length - 1;\n      }\n\n      childNode._parent = this;\n      this._dirty = true;\n      return pos;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_removeAll\",\n    value: function _removeAll() {\n      this._children = [];\n      this._dirty = true;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_styleWithPosition\",\n    value: function _styleWithPosition(style) {\n      if (style == null) {\n        style = {};\n      }\n\n      return this._rect.styleWithPosition(style);\n    }\n    /** @internal */\n\n  }, {\n    key: \"_getTempSize\",\n    value: function _getTempSize() {\n      return this._tempSize;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_setTempSize\",\n    value: function _setTempSize(value) {\n      this._tempSize = value;\n    }\n    /** @internal */\n\n  }, {\n    key: \"isEnableDivide\",\n    value: function isEnableDivide() {\n      return true;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_toAttributeString\",\n    value: function _toAttributeString() {\n      return JSON.stringify(this._attributes, undefined, \"\\t\");\n    }\n  }]);\n\n  return Node;\n}();","map":null,"metadata":{},"sourceType":"module"}