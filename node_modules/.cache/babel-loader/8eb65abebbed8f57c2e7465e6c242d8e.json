{"ast":null,"code":"import * as React from \"react\";\nimport { I18nLabel } from \"../I18nLabel\";\nimport { Actions } from \"../model/Actions\";\nimport { Rect } from \"../Rect\";\nimport { ICloseType } from \"../model/ICloseType\";\nimport { CLASSES } from \"../Types\";\nimport { getRenderStateEx, isAuxMouseEvent } from \"./Utils\";\n/** @internal */\n\nexport var BorderButton = function BorderButton(props) {\n  var layout = props.layout,\n      node = props.node,\n      selected = props.selected,\n      border = props.border,\n      iconFactory = props.iconFactory,\n      titleFactory = props.titleFactory,\n      icons = props.icons,\n      path = props.path;\n  var selfRef = React.useRef(null);\n  var contentRef = React.useRef(null);\n\n  var onMouseDown = function onMouseDown(event) {\n    if (!isAuxMouseEvent(event) && !layout.getEditingTab()) {\n      layout.dragStart(event, undefined, node, node.isEnableDrag(), onClick, onDoubleClick);\n    }\n  };\n\n  var onAuxMouseClick = function onAuxMouseClick(event) {\n    if (isAuxMouseEvent(event)) {\n      layout.auxMouseClick(node, event);\n    }\n  };\n\n  var onContextMenu = function onContextMenu(event) {\n    layout.showContextMenu(node, event);\n  };\n\n  var onClick = function onClick() {\n    layout.doAction(Actions.selectTab(node.getId()));\n  };\n\n  var onDoubleClick = function onDoubleClick(event) {// if (node.isEnableRename()) {\n    //     onRename();\n    // }\n  }; // const onRename = () => {\n  //     layout.setEditingTab(node);\n  //     layout.getCurrentDocument()!.body.addEventListener(\"mousedown\", onEndEdit);\n  //     layout.getCurrentDocument()!.body.addEventListener(\"touchstart\", onEndEdit);\n  // };\n\n\n  var onEndEdit = function onEndEdit(event) {\n    if (event.target !== contentRef.current) {\n      layout.getCurrentDocument().body.removeEventListener(\"mousedown\", onEndEdit);\n      layout.getCurrentDocument().body.removeEventListener(\"touchstart\", onEndEdit);\n      layout.setEditingTab(undefined);\n    }\n  };\n\n  var isClosable = function isClosable() {\n    var closeType = node.getCloseType();\n\n    if (selected || closeType === ICloseType.Always) {\n      return true;\n    }\n\n    if (closeType === ICloseType.Visible) {\n      // not selected but x should be visible due to hover\n      if (window.matchMedia && window.matchMedia(\"(hover: hover) and (pointer: fine)\").matches) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var onClose = function onClose(event) {\n    if (isClosable()) {\n      layout.doAction(Actions.deleteTab(node.getId()));\n    } else {\n      onClick();\n    }\n  };\n\n  var onCloseMouseDown = function onCloseMouseDown(event) {\n    event.stopPropagation();\n  };\n\n  React.useLayoutEffect(function () {\n    updateRect();\n\n    if (layout.getEditingTab() === node) {\n      contentRef.current.select();\n    }\n  });\n\n  var updateRect = function updateRect() {\n    // record position of tab in node\n    var layoutRect = layout.getDomRect();\n    var r = selfRef.current.getBoundingClientRect();\n\n    node._setTabRect(new Rect(r.left - layoutRect.left, r.top - layoutRect.top, r.width, r.height));\n  };\n\n  var onTextBoxMouseDown = function onTextBoxMouseDown(event) {\n    // console.log(\"onTextBoxMouseDown\");\n    event.stopPropagation();\n  };\n\n  var onTextBoxKeyPress = function onTextBoxKeyPress(event) {\n    // console.log(event, event.keyCode);\n    if (event.keyCode === 27) {\n      // esc\n      layout.setEditingTab(undefined);\n    } else if (event.keyCode === 13) {\n      // enter\n      layout.setEditingTab(undefined);\n      layout.doAction(Actions.renameTab(node.getId(), event.target.value));\n    }\n  };\n\n  var cm = layout.getClassName;\n  var classNames = cm(CLASSES.FLEXLAYOUT__BORDER_BUTTON) + \" \" + cm(CLASSES.FLEXLAYOUT__BORDER_BUTTON_ + border);\n\n  if (selected) {\n    classNames += \" \" + cm(CLASSES.FLEXLAYOUT__BORDER_BUTTON__SELECTED);\n  } else {\n    classNames += \" \" + cm(CLASSES.FLEXLAYOUT__BORDER_BUTTON__UNSELECTED);\n  }\n\n  if (node.getClassName() !== undefined) {\n    classNames += \" \" + node.getClassName();\n  }\n\n  var renderState = getRenderStateEx(layout, node, iconFactory, titleFactory);\n  var content = renderState.content ? React.createElement(\"div\", {\n    className: cm(CLASSES.FLEXLAYOUT__BORDER_BUTTON_CONTENT)\n  }, renderState.content) : null;\n  var leading = renderState.leading ? React.createElement(\"div\", {\n    className: cm(CLASSES.FLEXLAYOUT__BORDER_BUTTON_LEADING)\n  }, renderState.leading) : null;\n\n  if (layout.getEditingTab() === node) {\n    content = React.createElement(\"input\", {\n      ref: contentRef,\n      className: cm(CLASSES.FLEXLAYOUT__TAB_BUTTON_TEXTBOX),\n      \"data-layout-path\": path + \"/textbox\",\n      type: \"text\",\n      autoFocus: true,\n      defaultValue: node.getName(),\n      onKeyDown: onTextBoxKeyPress,\n      onMouseDown: onTextBoxMouseDown,\n      onTouchStart: onTextBoxMouseDown\n    });\n  }\n\n  if (node.isEnableClose()) {\n    var closeTitle = layout.i18nName(I18nLabel.Close_Tab);\n    renderState.buttons.push(React.createElement(\"div\", {\n      key: \"close\",\n      \"data-layout-path\": path + \"/button/close\",\n      title: closeTitle,\n      className: cm(CLASSES.FLEXLAYOUT__BORDER_BUTTON_TRAILING),\n      onMouseDown: onCloseMouseDown,\n      onClick: onClose,\n      onTouchStart: onCloseMouseDown\n    }, typeof icons.close === \"function\" ? icons.close(node) : icons.close));\n  }\n\n  return React.createElement(\"div\", {\n    ref: selfRef,\n    \"data-layout-path\": path,\n    className: classNames,\n    onMouseDown: onMouseDown,\n    onClick: onAuxMouseClick,\n    onAuxClick: onAuxMouseClick,\n    onContextMenu: onContextMenu,\n    onTouchStart: onMouseDown,\n    title: node.getHelpText()\n  }, leading, content, renderState.buttons);\n};","map":null,"metadata":{},"sourceType":"module"}